from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_get_employed_master, orm_add_employed_master, orm_get_employed_image, \
    orm_get_worker_type, orm_simplified_delete
from handlers.menu_processing import get_menu_content
from keyboards.inline import MenuCallback, back_menu_button, GlobalData, cancel_back_menu, DeleteCallback

user_private_router = Router()


@user_private_router.message(CommandStart())
async def start_bot(message: types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name='main')
    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)


@user_private_router.callback_query(F.data == 'my_staff')
async def my_employed_staff(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    if not [s for s in await orm_get_employed_master(session, callback.from_user.id)]:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–Ω—è—Ç—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤", reply_markup=back_menu_button())
    else:
        await callback.message.answer("–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –Ω–∞–Ω—è—Ç—ã–µ –º–∞—Å—Ç–µ—Ä–∞:")
        for staff in await orm_get_employed_master(session, callback.from_user.id):
            # –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –ë–î —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ –≤—Å–µ—Ö –Ω–∞–Ω—è—Ç—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            staff_image = await orm_get_employed_image(session, staff.worker_id)
            category_name = await orm_get_worker_type(session, staff.category_id)
            # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Staff —Å –ø–æ–º–æ—â—å—é –∞–π–¥–∏ –Ω–∞–Ω—è—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
            # –∏ —Ç–∞–∫–∂–µ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Category

            await callback.message.answer_photo(
                staff_image.image,
                caption=f"<strong>{staff.worker_name}\
                        </strong>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(staff.price)} —Ä—É–±.\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name.name}.\n" 
                        f"–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –Ω–∞–π–º: {staff.date}.\n"
                        f"–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞–π–º: {staff.time}.\n"
                        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞: {staff.phone_staff}.",
                reply_markup=cancel_back_menu(worker_id=staff.id)
            )


@user_private_router.callback_query(DeleteCallback.filter())
async def delete_employ(callback: CallbackQuery, callback_data: DeleteCallback, session: AsyncSession):
    await callback.answer()
    await orm_simplified_delete(session, worker_id=callback_data.worker_id)
    await callback.message.delete()
    await callback.message.answer("–ó–∞–ø–∏—Å—å –≤–∞—à–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=back_menu_button())


@user_private_router.callback_query(MenuCallback.filter())
async def user_menu(callback: CallbackQuery, callback_data: MenuCallback, session: AsyncSession):

    try:
        media, reply_markup = await get_menu_content(session, level=callback_data.level,
                     menu_name=callback_data.menu_name, staff_id=callback_data.staff_id,
                     page=callback_data.page, additional_info=callback_data.additional_info, callback=callback,
                     worker_id=callback_data.worker_id)

        await callback.message.edit_media(media=media, reply_markup=reply_markup)
        await callback.answer()

    except Exception as e:
        await callback.answer()
        print(str(e))


@user_private_router.pre_checkout_query()
async def pre_checkout_q(pre_checkout_query: types.PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)
    print(pre_checkout_query)


@user_private_router.message(F.successful_payment)
async def successful_payment(message: types.Message, session: AsyncSession):
    await orm_add_employed_master(session, message.from_user.id, GlobalData.data)
    info = await orm_get_employed_master(session, message.from_user.id)
    await message.answer(f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} "
                         f"{message.successful_payment.currency} –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ! ‚úÖ\n"
                         f"–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–±—ã—Ç–∏–µ –º–∞—Å—Ç–µ—Ä–∞ üïì {info[0].date} –≤ {info[0].time}.\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ üìû: {info[0].phone_staff}", reply_markup=back_menu_button())


@user_private_router.message(~Command("admin"))
async def remove_all(message: types.Message):
    await message.delete()

