import datetime
import os


from aiogram import types
from aiogram.types import InputMediaPhoto, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_get_banner, orm_get_staff_type, orm_get_staff, orm_get_worker_type, \
    orm_check_user, orm_get_staff_using_id, orm_add_employed_master, orm_get_employed_master, \
    orm_get_info_staff, orm_get_employed_master_check
from keyboards.inline import get_user_main_btns, get_user_catalog_btns, get_staff_btns, time_btns, payment_btns, \
    back_menu_button, get_callback_btns, get_date_btns, GlobalData
from utils.paginator import Paginator


async def main_menu(session, level, menu_name):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    kbds = get_user_main_btns(level=level)

    return image, kbds


async def check_user_in_db(session, callback):
    user = await orm_check_user(session, callback.from_user.id)
    return user


async def func_staff_type(session, level, menu_name):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    staff_type = await orm_get_staff_type(session)
    kbds = get_user_catalog_btns(level=level, staff_type=staff_type)

    return image, kbds


def pages(paginator: Paginator):
    btns = dict()
    if paginator.has_previous():
        btns["‚óÄ –ü—Ä–µ–¥."] = "previous"

    if paginator.has_next():
        btns["–°–ª–µ–¥. ‚ñ∂"] = "next"

    return btns


async def staff(session, level, staff_id, page):
    my_staff = await orm_get_staff(session, category_id=staff_id)
    # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    # my_staff —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ Staff, –≥–¥–µ –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –ø–æ–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    paginator = Paginator(my_staff, page=page)
    worker = paginator.get_page()[0]

    image = InputMediaPhoto(
        media=worker.image,
        caption=f"<strong>{worker.name}"
                f"</strong>\n{worker.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(worker.price)} —Ä—É–±.\n"
                f"<strong>–†–∞–±–æ—Ç–Ω–∏–∫ {paginator.page} –∏–∑ {paginator.pages} </strong>"
    )

    pagination_btns = pages(paginator)
    kbds = get_staff_btns(
        level=level,
        worker_id=worker.id,
        staff_id=staff_id,
        page=page,
        pagination_btns=pagination_btns,
    )

    return image, kbds


async def date_employ(session, level, worker_id, staff_id, page):
    image = None
    my_staff = await orm_get_staff_using_id(session, worker_id=worker_id)
    paginator = Paginator(my_staff, page=page)
    worker = paginator.get_page()[0]
    await GlobalData.update_data("worker_name", worker.name)

    current_date = datetime.date.today()
    filled_dates = []

    for i in range(7):
        current_date += datetime.timedelta(days=1)
        date = current_date.strftime("%d.%m")
        # –∏—â–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ —á–∞—Å—ã –≤ —ç—Ç—É –¥–∞—Ç—É
        info = await orm_get_employed_master_check(session, worker_id, date)
        dates = [i.date for i in info]

        if len(dates) == 4:
            # –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å —á–µ—Ç—ã—Ä–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –º–∞—Å—Ç–µ—Ä–∞,
            # —Ç–æ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
            filled_dates.append(dates[0])

    if len(filled_dates) < 7:
        var_image = InputMediaPhoto(
            media=worker.image,
            caption=f"<strong>{worker.name}"
                    f"</strong>\n{worker.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(worker.price, 2)}\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–±—ã—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞: "
        )
        image = var_image

    elif len(filled_dates) == 7: # –µ—Å–ª–∏ –≤—Å–µ –¥–Ω–∏ –∏ –≤—Å–µ —á–∞—Å—ã —É —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–Ω—è—Ç—ã, —Ç–æ —Å–æ–æ–±—â–∞–µ–º —é–∑–µ—Ä—É, —á—Ç–æ –æ–Ω –∑–∞–Ω—è—Ç
        var_image = InputMediaPhoto(
            media=worker.image,
            caption=f"–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –Ω–æ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –∑–∞–Ω—è—Ç –Ω–∞ –≤—Å–µ –¥–Ω–∏üò¢"
        )
        image = var_image

    kbds = get_date_btns(filled_dates=filled_dates, level=level, worker_id=worker_id, staff_id=staff_id)

    return image, kbds


async def time_employ(session, level, worker_id, staff_id, page, additional_info):
    # my_staff = await orm_get_staff(session, category_id=staff_id)
    await GlobalData.update_data("date", additional_info)
    await GlobalData.update_data("worker_id", worker_id)
    my_staff = await orm_get_staff_using_id(session, worker_id=worker_id)
    paginator = Paginator(my_staff, page=page)
    worker = paginator.get_page()[0]

    image = InputMediaPhoto(
        media=worker.image,
        caption=f"<strong>{worker.name}"
                f"</strong>\n{worker.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(worker.price, 2)}\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: "
    )

    info = await orm_get_employed_master_check(session, worker_id, additional_info)
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–Ω—è—Ç—ã–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏

    kbds = time_btns(
        info=info,
        level=level,
        worker_id=worker_id,
        staff_id=staff_id
    )

    return image, kbds


async def choose_payment(session, level, menu_name, worker_id, staff_id, additional_info):
    await GlobalData.update_data("time", additional_info)

    staff_phone = await orm_get_info_staff(session, worker_id)
    await GlobalData.update_data("phone", staff_phone.phone)

    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)
    kbds = payment_btns(level=level, worker_id=worker_id, staff_id=staff_id)

    return image, kbds


async def payment(session, menu_name, additional_info, worker_id, staff_id, callback):

    price = await orm_get_info_staff(session, worker_id)
    await GlobalData.update_data("price", int(round(price.price)))
    await GlobalData.update_data("category_id", staff_id)

    if additional_info == "cash":
        await orm_add_employed_master(session, callback.from_user.id, GlobalData.data)
        banner = await orm_get_banner(session, menu_name)
        info = await orm_get_employed_master(session, callback.from_user.id)
        image = InputMediaPhoto(media=banner.image, caption=f"–í—ã–±—Ä–∞–Ω–∞ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç "
                                                            f"{info[0].date} –≤ {info[0].time}.\n"
                                                            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞: {info[0].phone_staff}")
        kbds = back_menu_button()
        return image, kbds


    elif additional_info == "card":
        worker = await orm_get_worker_type(session, staff_id)
        await callback.bot.send_invoice(chat_id=callback.from_user.id, title=f'–£—Å–ª—É–≥–∞ "{worker.name}"', description='–û–ø–ª–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä—É',
                                        payload='invoice', provider_token=os.getenv("PAYMENT_TOKEN"), currency='RUB',
                                        prices=[types.LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä—É', amount=int(round(price.price))*100)],
                                        start_parameter='Staff_Bot')
        return


async def offer_to_reg(session, menu_name):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption="–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
    kbds = get_callback_btns(btns={"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "register"})

    return image, kbds


async def get_menu_content(session: AsyncSession, level: int, menu_name: str,
                           staff_id: int | None = None, page: int | None = None, additional_info: str | None = None,
                           callback: CallbackQuery | None = None, worker_id: int | None = None):
    if level == 0:
        return await main_menu(session, level, menu_name)
    elif level == 1 and await check_user_in_db(session, callback) is True:
        return await func_staff_type(session, level, menu_name)
    elif level == 2:
        return await staff(session, level, staff_id, page)
    elif level == 3:
        return await date_employ(session, level, worker_id, staff_id, page)
    elif level == 4:
        return await time_employ(session, level, worker_id, staff_id, page, additional_info)
    elif level == 5:
        return await choose_payment(session, level, menu_name, worker_id, staff_id, additional_info)
    elif level == 6:
        return await payment(session, menu_name, additional_info, worker_id, staff_id, callback)
    else:
        return await offer_to_reg(session, menu_name)


